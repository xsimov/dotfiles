source ~/Code/dotfiles/vim/plugins.vim
source ~/Code/dotfiles/vim/prettier.vim

set number
set rnu
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=4
set mouse=a
set backspace=2
set splitright
set splitbelow
set gcr=a:blinkon0
set guifont=Monaco:h15
colorscheme angr

set ignorecase
set smartcase

set directory^=$HOME/.vim/tmp//

set wildignore+=*/tmp/*,*.so,*.swp,*.zip

let g:user_emmet_mode='a'

let test#ruby#rspec#executable = 'bundle exec rspec'
let test#ruby#minitest#executable = 'bundle exec rake test'
let g:test#preserve_screen = 1
let test#strategy = {
      \ "suite": "tslime",
      \ "file": "tslime",
      \ "nearest": "tslime",
      \ "last": "tslime",
      \ }

let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'ruby', 'go', 'javascript']

let g:go_fmt_command = 'goimports'

map <C-p> :LeaderfFile<CR>

let g:go_highlight_extra_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_function_calls = 1

let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1

let g:Lf_CommandMap = {'<C-x>': ['<C-_>'], '<C-]>': ['<C-\>'], '<C-S>': ['<C-W>']}

map <Leader>t :w<CR>:TestFile<CR>
map <Leader>s :w<CR>:TestNearest<CR>
map <Leader>l :w<CR>:TestLast<CR>
map <Leader>a :w<CR>:TestSuite<CR>

map <Leader>q :vsp .<CR>
map <Leader>* :F <cword><CR>

nmap <leader>w :cw<CR>
nmap <leader>] :cn<CR>
nmap <leader>[ :cp<CR>
nmap <leader>- :sp<CR><C-p>
nmap <leader>\ :vsp<CR><C-p>
nmap <leader>D Orequire 'pry';binding.pry<Esc>

imap <leader>D require 'pry';binding.pry<Esc>
imap <Tab> <C-n>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

autocmd!
au FocusLost,BufLeave * wa
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
syntax on

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
highlight HLTrailingSpaces ctermbg=red ctermfg=white guibg=#592929

match HLTrailingSpaces /\s\+$/

function ForceHighlightingTrailingSpaces()
  match HLTrailingSpaces /\s\+$/
endfunction

function ShowOver80Chars()
  match OverLength /\%81v.\+/
endfunction

function HideOver80Chars()
  match OverLength //
endfunction

func GitGrep(...)
  let save = &grepprg
  set grepprg=git\ grep\ -n\ $*
  let s = 'grep'
  for i in a:000
    let s = s . ' ' . i
  endfor
  exe s
  let &grepprg = save
endfun
command -nargs=? F call GitGrep(<f-args>)
